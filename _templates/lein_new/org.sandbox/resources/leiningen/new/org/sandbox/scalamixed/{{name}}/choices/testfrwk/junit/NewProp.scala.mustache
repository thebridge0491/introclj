package {{namespace}}{{^namespace}}org.sandbox.intro_scala.util{{/namespace}} {

import org.scalacheck.{Prop,Properties,Gen}
import org.scalacheck.Prop._
import org.junit.Test
import org.junit.Assert._

import scala.collection.mutable.{ListBuffer => M_List}

class NewProp {
	import scala.language.implicitConversions
	import org.scalacheck.{Test => SchkTest}

	implicit def doCheck(p: org.scalacheck.Prop): Boolean = {
		SchkTest.check(SchkTest.Parameters.default, p).passed
        //SchkTest.check(SchkTest.Parameters.defaultVerbose, p).passed
	}
    
    // using def doCheck, scalacheck property check
    /*val propMap = NewProp.properties.toMap
    
    @Test
    def test_propCommutativeAdd() =
        assertTrue(doCheck(propMap(NewProp.name + ".commutative addition")))
    
    @Test
    def test_propAssociativeAdd() =
        assertTrue(doCheck(propMap(NewProp.name + ".associative addition")))*/
    
    @Test
    def test_propsNew() =
        // (from junit) execute scalacheck-style propert(y|ies) check(s)
        //NewProp.main(Array())
        NewProp.properties.foreach { (name_prop:(String, Prop)) => 
            name_prop match { case (name, prop) => 
                //prop.check
                
                // using def doCheck, scalacheck property check
                try {
                    assertTrue(doCheck(prop))
                } catch {
                    case exc: AssertionError => {
                        Console.err.printf("AssertionError: %s\n".format(name))
                        fail("%s -- %s".format(name, prop))
                    }
                }
            }
        }
}

// scalacheck properties object w/ (implicit) main method
object NewProp extends Properties("(props) New examples") {
    //import scala.language.implicitConversions
    
    implicit val chooseInteger: Gen.Choose[Integer] = new Gen.Choose[Integer] {
		def choose(low: Integer, high: Integer) =
			Gen.Choose.chooseInt.choose(low.intValue, high.intValue).map(
				e => Integer.valueOf(e))
	}
    
    //val tolerance = 2.0f * Float.MinPositiveValue
    val epsilon = 0.001 //1.0e-7f
	
    def in_epsilon(a: Double, b: Double, tolerance: Double = 0.001): Boolean = {
        val delta = Math.abs(tolerance)
        //(a - delta) <= b && (a + delta) >= b
		!((a + delta) < b) && !((b + delta) < a)
    }
    
    def genTup2Int(gen0: Gen[Int], gen1: Gen[Int]) = 
        for { x <- gen0 ; y <- gen1 } yield (x, y)
    
    def genTup3Int(gen0: Gen[Int], gen1: Gen[Int], gen2: Gen[Int]) = 
        for { x <- gen0 ; y <- gen1 ; z <- gen2 } yield (x, y, z)
    
    def genListInts(gen0: Gen[Int]) = for {
        numElems <- Gen.choose[Int](1, 100)
        //elems <- Gen.listOfN[Int](numElems, gen0)
		elems <- Gen.containerOfN[M_List, Int](numElems, gen0)
	} yield elems
    
    
    // scalacheck-style property define
    property("commutative addition") = forAll(genTup2Int(
            Gen.choose(-50, 50), Gen.choose(-50, 50))) { (x_y:(Int, Int)) =>
        x_y match { case (x, y) =>
            val (ans, res) = (x + y, y + x)
            (ans == res).label("===propCommutativeAdd(%d, %d) : %d===".format(
                x, y, ans))
        }
    }
    
    property("associative addition") = forAll(genTup3Int(
            Gen.choose(-25, 25), Gen.choose(-25, 25), Gen.choose(0, 25))) { (x_y_z:(Int, Int, Int)) =>
        x_y_z match { case (x, y, z) =>
            val (ans, res) = ((x + y) + z, x + ( y + z))
            (ans == res).label("===propCommutativeAdd(%d, %d, %d) : %d===".format(
                x, y, z, ans))
        }
    }
    
    property("list reverse reverse is list") = forAll(genListInts(
            Gen.choose(-50, 50))) { (xs: M_List[Int]) => 
        val (ans, res) = (xs, xs.reverse.reverse)
        (ans == res).label("===propRevRev(%s) : %s===".format(
            res.mkString("[", ", ", "]"), ans.mkString("[", ", ", "]")))
    }
    
    property("list reverse is list") = forAll(genListInts(
            Gen.choose(-50, 50))) { (xs: M_List[Int]) => 
        val (ans, res) = (xs, xs.reverse)
        (ans == res).label("===propRevId(%s) : %s===".format(
            res.mkString("[", ", ", "]"), ans.mkString("[", ", ", "]")))
    }
    
    property("list reverse & sorted is list") = forAll(genListInts(
            Gen.choose(-50, 50))) { (xs: M_List[Int]) => 
        val (ans, res) = (xs.sorted, xs.reverse.sorted)
        (ans == res).label("===propSortRev(%s) : %s===".format(
            res.mkString("[", ", ", "]"), ans.mkString("[", ", ", "]")))
    }
    
    property("head of sorted list is minimum") = forAll(genListInts(
            Gen.choose(-50, 50))) { (xs: M_List[Int]) => 
        val (ans, res) = (xs.min, xs.sorted.apply(0))
        (ans == res).label("===propSortMin(%d) : %d===".format(res, ans))
    }
}

}
