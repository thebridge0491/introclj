RAKE = ENV['RAKE'] ? ENV['RAKE'] : 'rake'
# Multi-package project rakefile script.
require 'rake/clean'
require 'rake/packagetask'

[CLEAN, CLOBBER, Rake::FileList::DEFAULT_IGNORE_PATTERNS].each{|a| a.clear}
CLEAN.include("**/core*", "**/*~", "**/*.o", "**/*.log", ".coverage")
CLOBBER.include("target/*", "target/.??*")

def _get_task_opts(options={})
  require 'optparse'
  
  o = OptionParser.new do |opts|
    opts.banner = "Usage: #{RAKE} <opts_task> [options]"
    opts.on("-a OPTS", "--args OPTS") { |args| options[:args] = args }
  end
  options[:leftovers] = o.parse(o.order(ARGV) {})
  options
end

desc "Task example with opts: #{RAKE} _opts_task -- -a '-h'"
task :_opts_task do
  options = _get_task_opts #({ args: '' })
  puts "Options were: #{options[:args]}"
end

desc "Task example with args: #{RAKE} _args_task\[arg1,arg2\]"
task :_args_task, [:arg1] do |t, args|
  puts "Args were: #{args[:arg1]} #{args.extras.join(' ')}"
end

parent, version = '{{parent}}{{^parent}}intro_scala{{/parent}}', '0.1.0'
SUBDIRS = ENV['SUBDIRS'] ? ENV['SUBDIRS'].split() : 'common app'.split()

desc 'configure \[opt1,opt2\]'
task :configure, [:opt1] do |task_name, opts|
  SUBDIRS.each { |dirX| mkdir_p(dirX + '/target')
    cd(dirX) { 
      sh "sh ./configure.sh #{opts[:opt1]} #{opts.extras.join(' ')}" } }
end

desc "Default target: #{RAKE} help"
task :default => [:help]

desc "Help info"
task :help do |task_name|
  SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} #{task_name}" } }
  puts "##### Top-level multiproject: #{parent} #####"
  puts "Usage: #{RAKE} [SUBDIRS=#{SUBDIRS.join(' ')}] [task]"
  sh "#{RAKE} -T"
end

task :subclean do
	SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} clean" } }
end
task :subclobber do
	SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} clobber" } }
end
task :clean => [:subclean]
task :clobber => [:subclobber]

[['all', 'Compile target(s)'],
  ['compile', 'Compile target(s)'],
  ['testCompile', 'Compile test target(s)'],
  ['publish', 'Publish artifact(s)']
].each do |task_name, desc_txt|
  desc desc_txt
  task :"#{task_name}" do
    SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} #{task_name}" } }
  end
end

desc 'Run test(s): rake test\[topt1,topt2\]'
task :test, [:topt1] do |task_name, topts|
  SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} #{task_name}\\[#{topts[:topt1]},#{topts.extras.join(',')}\\]" } }
end

#----------------------------------------
file "target/#{parent}-#{version}" do |p|
  mkdir_p(p.name)
  # sh "zip -9 -q --exclude @exclude.lst -r - . | unzip -od #{p.name} -"
  sh "tar --format=posix --dereference --exclude-from=exclude.lst -cf - . | tar -xpf - -C #{p.name}"
end

if defined? Rake::PackageTask
  Rake::PackageTask.new(parent, version) do |p|
    # task("target/#{parent}-#{version}").invoke
    
    ENV.fetch('FMTS', 'tar.gz').split(',').each{|fmt|
      if p.respond_to? "need_#{fmt.tr('.', '_')}="
        p.send("need_#{fmt.tr('.', '_')}=", true)
      else
        p.need_tar_gz = true
      end
    }
    task(:package).add_description "[FMTS=#{ENV.fetch('FMTS', 'tar.gz')}]"
    task(:repackage).add_description "[FMTS=#{ENV.fetch('FMTS', 'tar.gz')}]"
  end
  
  task :subpackage do
	SUBDIRS.each {|dirX| cd(dirX) {sh "#{RAKE} package"}}
  end
  task :subrepackage do
	SUBDIRS.each {|dirX| cd(dirX) {sh "#{RAKE} repackage"}}
  end
  task :package => :subpackage
  task :repackage => :subrepackage
else
  desc "[FMTS=#{ENV.fetch('FMTS', 'tar.gz')}] Package project distribution"
  task :dist => ["target/#{parent}-#{version}"] do |t|
    distdir = "#{parent}-#{version}"
    
    ENV.fetch('FMTS', 'tar.gz').split(',').each{|fmt|
      case fmt
      when 'zip'
        rm_rf("target/#{distdir}.zip") || true
        cd('target') {sh "zip -9 -q -r #{distdir}.zip #{distdir}" || true}
      else
        #tarext = `echo #{fmt} | grep -e '^tar$' -e '^tar.xz$' -e '^tar.bz2$' || echo tar.gz`.chomp
        tarext = fmt.match(%r{(^tar$|^tar.xz$|^tar.bz2$)}) ? fmt : 'tar.gz'
        rm_rf("target/#{distdir}.#{tarext}") || true
        cd('target') {sh "tar --posix -L -caf #{distdir}.#{tarext} #{distdir}" || true}
      end
    }
    rm_rf("target/#{distdir}") || true
    #SUBDIRS.each {|dirX| cd(dirX) {sh "#{RAKE} #{task_name}"}}
  end
end

[['jar', 'Jar sub-package files'],
  ['javadoc', '(javadoc) Generate API documentation(s)'],
  ['scaladoc', '(scaladoc) Generate API documentation(s)'],
  ['checkstyle', '(checkstyle) Lint check(s)'],
  ['scalastyle', '(scalastyle) Lint check(s)'],
  ['cover', 'Generate code coverage(s)'],
  ['report', 'Report code coverage(s)']
].each do |task_name, desc_txt|
  desc desc_txt
  task :"#{task_name}" do
    SUBDIRS.each { |dirX| cd(dirX) { sh "#{RAKE} #{task_name}" } }
  end
end

[['run', 'Run main: rake run\[arg1,arg2\]'],
  ['debug', 'Debug main: rake debug\[arg1,arg2\]']
].each do |task_name, desc_txt|
  desc desc_txt
  task :"#{task_name}", [:arg1] do |t, args|
    cd('app') { 
      sh "#{RAKE} #{task_name}\\[#{args[:arg1]},#{args.extras.join(',')}\\]" }
  end
end
