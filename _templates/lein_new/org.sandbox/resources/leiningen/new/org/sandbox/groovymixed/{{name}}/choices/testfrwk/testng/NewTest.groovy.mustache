package {{namespace}}{{^namespace}}org.sandbox.intro_groovy.util{{/namespace}}

import org.testng.annotations.Test
import static org.testng.Assert.*

class NewTest {
	//private def tolerance = 2.0f * Float.MIN_VALUE
	private def epsilon = 1.0e-7f
	
    NewTest() {
    }
    
    Boolean in_epsilon(Float a, Float b, Float tolerance = 0.001f) {
		def delta = Math.abs(tolerance)
		//return (a - delta) <= b && (a + delta) >= b
		return !((a + delta) < b) && !((b + delta) < a)
	}

    @org.testng.annotations.BeforeClass
    public static void setUpClass() throws Exception {
    	System.err.println("###setup TestCase###")
    }
    @org.testng.annotations.AfterClass
    public static void tearDownClass() throws Exception {
    	System.err.println("###teardown TestCase###")
    }
    
    @org.testng.annotations.BeforeMethod
    public void setUp() {
    	System.err.println("setup Test ...")
    }
    @org.testng.annotations.AfterMethod
    public void tearDown() {
    	System.err.println("... teardown Test")
    }
	
    @Test
    void test_classExists() {
        try {
            Class.forName(sprintf("%s.Library",
                this.getClass().getPackage().getName()))
        } catch(ClassNotFoundException exc) {
            //fail("Class(es) not existent: " + Library.class.getName())
            fail(sprintf("%s %s", "Class(es) not existent:",
                java.util.Arrays.toString([Library.class.getName()] as String[])))
        }
    }
    
	@Test
    void test_method() { assertEquals(4, 2 * 2)
    }
    @Test
    void test_dblMethod() {
		//assertEquals(100.001f, 100.001f, epsilon)
		assertTrue(in_epsilon(100.001f, 100.001f, epsilon))
    }
    @Test
    void test_strMethod() { assertEquals("Hello", "Hello")
    }
    @Test(timeOut = 1000L)
    void test_timeoutMethod() { for (int i = 0; 1.0e6f > i; ++i);
    }
    @Test(enabled = false)
    void test_ignoredMethod() { assertEquals(5, 2 * 2)
    }
    @Test //(expectedExceptions = AssertionError.class)
    void test_failMethod() { fail()
    }
    @Test(expectedExceptions = IllegalArgumentException.class)
    void test_exceptionMethod() {
        throw new IllegalArgumentException()
    }
}
