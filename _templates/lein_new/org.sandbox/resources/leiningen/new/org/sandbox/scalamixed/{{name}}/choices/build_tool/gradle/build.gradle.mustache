/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/current/userguide/java_library_plugin.html
 */

buildscript {
	repositories {
		mavenLocal()
		if (!gradle.startParameter.offline) {
			mavenCentral()
			//jcenter()
			//maven { url 'https://repo.spring.io/plugins-release' }
		}
	}
	
	dependencies {
		classpath 'io.spring.gradle:dependency-management-plugin:+'
	}
}

plugins {
    id 'maven'			// add support to deploy (Maven repos) artifacts
    //id 'groovy'			// extend Java plugin with Groovy support
    id 'scala'			// extend Java plugin with Scala support
    {{#executable}}
    id 'application'	// extend Java plugin with support to build an application and archive (tar, zip) distribution
    {{/executable}}
    {{^executable}}
    id 'distribution'	// add support to archive (tar, zip) distribution
    {{/executable}}
}

apply plugin: 'io.spring.dependency-management'

description = '{{description}}{{^description}}Utilities sub-package for Scala Intro examples project.{{/description}}'
//gradle.startParameter.offline = true

//org.apache.tools.ant.DirectoryScanner.removeDefaultExclude('**/.gitignore')
//org.apache.tools.ant.DirectoryScanner.removeDefaultExclude('**/.hgignore')

group = '{{groupid}}{{^groupid}}org.sandbox{{/groupid}}'
version = '{{version}}{{^version}}0.1.0{{/version}}'

//sourceCompatibility = javacSource
//targetCompatibility = javacTarget

ext['scala.compat'] = System.properties['scala.compat'] ?: '2.9'
ext {
    ld_path = [System.env.LD_LIBRARY_PATH ?: '.', 
		System.getProperty('java.library.path', '.')].join(':')
    defaultJvmArgs = ['-esa', '-ea', '-Xmx1024m', '-Xms16m', '-Xss16m']
    pkgname = "${project.group}.${project.name.replaceAll('-', '.')}"
                                                // -PtestOpts=-h,s
    //toptslist = Eval.me(testOpts).flatten()	// -PtestOpts="['-h', '-s']"
    toptslist = '' == testOpts ? [] : testOpts.split(',').flatten()
    argslist = appArgs.split(',').flatten()
}
{{#executable}}

application {
	applicationDefaultJvmArgs += defaultJvmArgs
}

// Define the main class for the application
mainClassName = "${pkgname}.Main"
jar.manifest { attributes 'Main-Class': mainClassName }
{{/executable}}

ant.lifecycleLogLevel = 'INFO'
ant.properties['java.lib'] = System.env.OSTYPE.grep(~/^(?i)linux.*/) ? 
    '/usr/share/java' : '/usr/local/share/java/classes'
ant.properties['scala.lib'] = System.env.OSTYPE.grep(~/^(?i)linux.*/) ? 
    '/usr/share/scala' : '/usr/local/share/scala/lib'

configurations {
	testOutput.extendsFrom (testCompile)
    checkstyle // with plugin: id 'checkstyle'
    scalastyle // with plugin: id 'scalastyle'
    jacoco // with plugin: id 'jacoco'
}

sourceSets {
	main {
		scala { srcDirs = ['src/main/java', 'src/main/scala'] }
		java { srcDirs = [] /*['src/main/java']*/ }
	}
	test {
		scala { srcDirs = ['src/test/java', 'src/test/scala']
			exclude '**/ClassicTest.*', '**/ClassicProp.*'
		}
		java { srcDirs = [] /*['src/test/java']*/
			exclude '**/ClassicTest.*', '**/ClassicProp.*'
		}
	}
}

repositories {		// You can declare any Maven/Ivy/file repository here.
    flatDir { dirs "${rootDir}/lib" /*,ant.properties['java.lib'], 
		ant.properties['scala.lib']*/  }
	mavenLocal()    // maven {url "${System.env.HOME}/.m2/repository"}
	if (!gradle.startParameter.offline) {
		mavenCentral()  // maven {url 'https://repo.maven.apache.org/maven2'}
		//jcenter()       // maven {url 'https://jcenter.bintray.com'}
	}
	ivy {
        url "${System.env.HOME}/.ivy2/cache"
        layout 'pattern', {
			//artifact IVY_ARTIFACT_PATTERN
			artifact '[organisation]/[module]/[type]s/[artifact](-[revision])(-[classifier]).[ext]'
			ivy '[organisation]/[module]/ivy-[revision].xml'
        }
        //url "${System.env.HOME}/.ivy2/local"
        //layout 'ivy'
	}
}

dependencyManagement {
	imports {
		mavenBom('{{groupid}}{{^groupid}}org.sandbox{{/groupid}}:{{parent}}{{^parent}}intro_scala{{/parent}}-bom:0') {
			//bomProperty 'version.junit', '[4.10,)'
			bomProperty 'version.scala', '[2.9.2,)'
			bomProperty 'version.scalatest', '[1.8,)'
			bomProperty 'version.scalacheck', '[1.8,)'
		}
	}
	dependencies { // version range ex: [0.1.0,)  0.1.+  latest.release
        // example: versions inherited from depns in BOM
        /*dependency "org.scala-lang:scala-library:[${project['scala.compat']},)"
        dependency 'junit:junit:[4.10,)'
        dependency 'org.slf4j:slf4j-api:[1.6.5,)'
		*/
        
        dependency 'org.jacoco:org.jacoco.ant:[0.5.9.201207300726,)'
        dependency 'com.puppycrawl.tools:checkstyle:[5.5,)'
        dependency "org.scalastyle:scalastyle_${project['scala.compat']}:[0.1.0,)"
		dependency 'com.typesafe.zinc:zinc:[0.1.0,)'
	}
}

dependencies {
	compile "org.scala-lang:scala-library"
    //compile fileTree(dir: ant.properties['scala.lib'], includes: ['scala-library.jar'])
	testCompile "org.scalacheck:scalacheck_${project['scala.compat']}"
	testCompile "org.scalatest:scalatest_${project['scala.compat']}"
	
	//testCompile 'junit:junit'
    //testCompile fileTree(dir: ant.properties['java.lib'], includes: ['hamcrest-core.jar', 'junit.jar'])
    //testCompile 'org.testng:testng'
    //testCompile 'org.spockframework:spock-core'
    
	compile 'org.slf4j:slf4j-api'
    
	compile 'org.ini4j:ini4j'
    //compile 'net.java.dev.jna:jna'
    
    {{#executable}}
    compile 'org.glassfish:javax.json'
    compile 'javax.json:javax.json-api'
    compile 'org.yaml:snakeyaml'
    //runtime 'org.slf4j:log4j-over-slf4j'
    runtime 'ch.qos.logback:logback-classic'
    {{/executable}}
    {{^executable}}
    //testRuntime 'org.slf4j:log4j-over-slf4j'
    //testRuntime 'ch.qos.logback:logback-classic'
    {{/executable}}
    
    jacoco 'org.jacoco:org.jacoco.ant'
    //jacoco fileTree(dir: "${System.env.HOME}/.ant/lib", includes: ['org.jacoco.ant*.jar', 'asm-*.jar'])
    checkstyle 'com.puppycrawl.tools:checkstyle'
    //checkstyle fileTree(dir: ant.properties['java.lib'], includes: ['checkstyle*.jar'])
    scalastyle "org.scalastyle:scalastyle_${project['scala.compat']}"
    //scalastyle fileTree(dir: "${System.env.HOME}/javalib", includes: ['scalastyle*.jar', 'scalariform*.jar', 'config*.jar', 'scala-*.jar'])
    zinc 'com.typesafe.zinc:zinc'
}

tasks.withType(ScalaCompile) {
    if ('1' == DEBUG) {
        options.compilerArgs += ['-g']    // << '-g' OR += ['-g']
        scalaCompileOptions.additionalParameters = ['-g:vars']
    } else {
        scalaCompileOptions.additionalParameters = ['-optimise']
    }
    options.compilerArgs += ['-Xlint:all', '-deprecation']
    scalaCompileOptions.additionalParameters += ['-deprecation', '-unchecked',
        '-feature']
    //scalaCompileOptions.force = false
	//scalaCompileOptions.forkOptions.jvmArgs = ['-XX:MaxPermSize=1024m']
	//scalaClasspath = fileTree(dir: ant.properties['scala.lib'])
	//zincClasspath = fileTree(dir: ant.properties['scala.lib'])
    //configurations.zinc.transitive = true
}

tasks.withType(JavaCompile) {
    if ('1' == DEBUG) {
        options.compilerArgs += ['-g']    // << '-g' OR += ['-g']
    }
    options.compilerArgs += ['-Xlint:all', '-deprecation']
}

tasks.withType(JavaExec) {
	enableAssertions = true
}

test { ignoreFailures true
	description description + " [-PtestOpts='${testOpts}']"
	environment 'LD_LIBRARY_PATH', ld_path
    systemProperties(System.getProperties())
    allJvmArgs = defaultJvmArgs
    testLogging.showStandardStreams = true
    //includes = (toptslist.collect { it.replace('.', '/') + '.class' })
    setTestNameIncludePatterns(toptslist)
    exclude '**/Ts_*.class'
	outputs.upToDateWhen { false }
}

//useTestNG()

assemble {
    description description + " [-PDEBUG='${DEBUG}']"
}

clean {
	FileTree tree = fileTree('.').include('*.log')
	delete tree
}

tasks.withType(Jar) {
	duplicatesStrategy 'exclude'
    doFirst {
        manifest {
            attributes(
                'Build-Jdk': System.properties['java.version'],
                'Created-By': 'Gradle ' + gradle.gradleVersion,
                'Built-By': '',
                'Package': project.pkgname,
                'Implementation-Title': project.name,
                'Implementation-Vendor-Id': project.group,
                'Implementation-Version': project.version
            )
        }
    }
}

tasks.withType(Tar) {
	description description + " [-Ptarext='${tarext}']"
	switch (tarext) {
		case 'tar': compression = Compression.NONE ; extension = 'tar'
			break
		case 'tar.bz2': compression = Compression.BZIP2 ; extension = 'tar.bz2'
			break
		default: compression = Compression.GZIP ; extension = 'tar.gz'
			break
	}
}

assembleDist {
	description description + " [-Ptarext='${tarext}']"
}

jar {
	//if ((new File('exclude.lst')).exists()) {
	//	from('.') { exclude (new File('exclude.lst') as String[])
	//		exclude '**/build/*', '**/gradle/*' }
	//	exclude '**/*.jar', '**/.gradle/', '**/build/*', '**/gradle/*'
	//} else {
	//	//from sourceSets.main.allSource
	//	from('.') { include '**/*.gradle', '**/src/', '**/*.properties' }
	//	exclude '**/*.jar', '**/.gradle/', '**/build/*', '**/gradle/*'
	//}
	
	doFirst {
		manifest {
			def mfClasspath = configurations.runtime.collect {
				'lib/' + it.getName()}.join(' ')
			attributes 'Class-Path': mfClasspath
		}
	}
}

scaladoc {
    /*scalaClasspath = files(
		"${ant.properties['scala.lib']}/scala-library.jar", 
		"${ant.properties['scala.lib']}/scala-compiler.jar", 
		"${ant.properties['scala.lib']}/scala-reflect.jar")*/
    //scalaClasspath = fileTree(ant.properties['scala.lib']).include('*.jar')
}

artifacts.archives(tasks.jar)
distTar.classifier = 'project'
distZip.classifier = 'project'

distributions {
	ant.defaultexcludes remove: '**/.hgignore'
	ant.defaultexcludes remove: '**/.gitignore'
	main { baseName = project.name
		if ((new File('exclude.lst')).exists()) {
		contents {
			//from('.') { include '**/*.gradle', '**/src/', '**/*.properties' }
			from('.') { exclude (new File('exclude.lst') as String[])
				exclude '**/build/*', '**/gradle/*' }
			exclude '**/*.jar', '**/.gradle/', '**/build/*', '**/gradle/*'
		}
		} else {
		contents {
			from('.') { include '**/*.gradle', '**/src/', '**/*.properties' }
			exclude '**/*.jar', '**/.gradle/', '**/build/*', '**/gradle/*'
		}
		}
	}
}

{{#executable}}
run {
	description description + " [-PappArgs='${appArgs}']"
	environment 'LD_LIBRARY_PATH', ld_path
    //jvmArgs applicationDefaultJvmArgs
    systemProperties(System.getProperties())
    args argslist
	standardInput = System.in
}

task debug(dependsOn: [assemble]) {
    description "Debug project\'s main [-PappArgs='${appArgs}']"
	doLast { ignoreExitValue true
        /*environment 'LD_LIBRARY_PATH', ld_path
        executable = 'ddd'
        args = ['--jdb'] + applicationDefaultJvmArgs.collect { "-J${it}" } +
            [mainClassName] + argslist
        standardInput = System.in
        */
        println exec_output("ddd --jdb " + 
            ${applicationDefaultJvmArgs.collect { "-J${it}" }.join(' ')} + 
            " ${mainClassName} ${argslist.join(' ')}")
    }    
}

task('run-jar', dependsOn: [jar]) {
    description "Run project jar\'s main [-PappArgs='${appArgs}']"
	doLast {
        /*javaexec { ignoreExitValue true
            environment 'LD_LIBRARY_PATH', ld_path
            jvmArgs = applicationDefaultJvmArgs
            main = '-jar'
            args = [jar.archivePath] + argslist
        }*/
        println exec_output("java ${applicationDefaultJvmArgs.join(' ')} -jar ${jar.archivePath} ${argslist.join(' ')}")
    }    
}

task('debug-jar', dependsOn: [jar]) {
    description "Debug project jar\'s main [-PappArgs='${appArgs}']"
	doLast { ignoreExitValue true
        /*environment 'LD_LIBRARY_PATH', ld_path
        executable = 'ddd'
        args = ['--jdb'] + applicationDefaultJvmArgs.collect { "-J${it}" } +
            ['-classpath', jar.archivePath, mainClassName] + argslist
        standardInput = System.in
        */
        println exec_output("ddd --jdb " +
            ${applicationDefaultJvmArgs.collect { "-J${it}" }.join(' ')} + 
            " -classpath ${jar.archivePath} ${mainClassName} ${argslist.join(' ')}")
    }    
}
{{/executable}}

if ((new File("${projectDir}/build-targets.gradle")).exists()) {
	//apply from: "${projectDir}/depnmgr-ivy.gradle"
	apply from: "${projectDir}/build-targets.gradle"
	
	jar.dependsOn([copyDepns])
	artifacts.archives(tasks.jarTests) //, tasks.jarSources, tasks.jarJavadoc)
}

//task auxffi(type: Exec) { workingDir projectDir ; ignoreExitValue true
//	description "Compile FFI auxiliary products [-Pprefix='${prefix}']"
//	environment PREFIX:prefix, CC:'cc'
//	def make_cmd = System.env.OSTYPE.grep(~/^(?i)linux.*/) ? 'make' : 'gmake'
//	commandLine "${make_cmd} -B -f Makefile-auxffi.mk auxffi".split()
//}
//assemble.dependsOn auxffi
