<?xml version = '1.0' encoding = 'UTF-8'?>
<project name = '{{parent}}{{^parent}}intro_scala{{/parent}}' default = 'help' basedir = '.'>
  <description>Multi-package Ant buildfile script.</description>
  
  <property environment = 'env'/>
  <property file = 'build.properties'/>
  
  <property name = 'echo.pat' value = '^ant\.'/>

  <condition property = 'tar.compression' value = 'xz'>
    <equals casesensitive = 'false' arg1 = 'tar.xz' arg2 = "${tarext}"/>
  </condition>
  <condition property = 'tar.compression' value = 'bzip2'>
    <equals casesensitive = 'false' arg1 = 'tar.bz2' arg2 = "${tarext}"/>
  </condition>
  <condition property = 'tar.compression' value = 'gzip'>
    <equals casesensitive = 'false' arg1 = 'tar.gz' arg2 = "${tarext}"/>
  </condition>
  <condition property = 'tar.compression' value = 'none' else = 'none'>
    <equals casesensitive = 'false' arg1 = 'tar' arg2 = "${tarext}"/>
  </condition>
  
  <macrodef name = 'iterate'>
    <attribute name = 'target'/>
    <sequential>
      <!--<subant target = "@{target}">
        <fileset dir = '.' includes = 'common/build.xml,app/build.xml'/>
      </subant>-->
      <subant target = "@{target}">
        <dirset dir = '.' includes = "${subdirs}"/> </subant>
    </sequential>
  </macrodef>
  
  <target name = 'help' description = "Usage: ant [-Dsubdirs='${subdirs}' -DDEBUG=${DEBUG}] [target]">
    <iterate target = 'help'/> </target>
  
  <target name = 'properties' description = "Echo properties matching pattern [-Dsubdirs='${subdirs}' -Decho.pat='${echo.pat}']">
    <iterate target = 'properties'/> </target>
  <target name = 'prep' description = "Prep build [-Dsubdirs='${subdirs}']">
    <iterate target = 'prep'/> </target>
  
  <target name = 'clean' description = "Remove generated file(s) [-Dsubdirs='${subdirs}']">
    <iterate target = 'clean'/> </target>
  <target name = 'compile' description = "Build target [-Dsubdirs='${subdirs}']">
    <iterate target = 'compile'/> </target>
  <target name = 'testCompile' description = "Build test [-Dsubdirs='${subdirs}']">
    <iterate target = 'testCompile'/> </target>
  <target name = 'test' description = "Run test: ant [-Dsubdirs='${subdirs}' -Dtest.opts='${test.opts}'] test">
    <iterate target = 'test'/> </target>
  <target name = 'run' description = "Run program: ant [-Dsubdirs='${subdirs}' -Dapp.args='${app.args}'] run">
    <iterate target = 'run'/> </target>
  <target name = 'debug' description = "Debug program: ant [-Dsubdirs='${subdirs}' -Dapp.args='${app.args}'] debug">
    <iterate target = 'debug'/> </target>

  <target name = 'distTar' description = 'Distribution tarball'>
    <delete failonerror = 'false'
      dir = "${build.dir}/${ant.project.name}-${ant.project.rev}"/>
    <mkdir dir = "${build.dir}/${ant.project.name}-${ant.project.rev}"/>
    <exec executable = 'sh'>
      <arg value = '-c'/>
      <arg value = "tar -L -X ${basedir}/exclude.lst -cf - . | tar -vxpf - -C ${build.dir}/${ant.project.name}-${ant.project.rev}"/>
    </exec>

    <delete failonerror = 'false'
      file = "${build.dir}/${ant.project.name}-${ant.project.rev}.${tarext}"/>
    <tar destfile = "${build.dir}/${ant.project.name}-${ant.project.rev}.${tarext}"
        basedir = "${build.dir}" compression = "${tar.compression}" 
        excludesfile = "${basedir}/exclude.lst"
        includes = "${ant.project.name}-${ant.project.rev}/**"/>
  </target>
  <target name = 'distZip' description = 'Distribution zip archive'
        depends = 'distTar'>
    <delete failonerror = 'false'
      file = "${build.dir}/${ant.project.name}-${ant.project.rev}.zip"/>
    <zip destfile = "${build.dir}/${ant.project.name}-${ant.project.rev}.zip"
        basedir = "${build.dir}" excludesfile = "${basedir}/exclude.lst"
        includes = "${ant.project.name}-${ant.project.rev}/**"/>
  </target>
  
  <target name = 'package' description = "Package project (jar) [-Dsubdirs='${subdirs}']">
    <iterate target = 'package'/> </target>
  <target name = 'javadoc' description = "Generate documentation (javadoc) [-Dsubdirs='${subdirs}']">
    <iterate target = 'javadoc'/> </target>
  <target name = 'scaladoc' description = "Generate documentation (scaladoc) [-Dsubdirs='${subdirs}']">
    <iterate target = 'scaladoc'/> </target>
  <target name = 'doc' description = "Generate documentation (javadoc &amp; scaladoc) [-Dsubdirs='${subdirs}']">
    <iterate target = 'doc'/> </target>

  <target name = 'xmlToHtml' description = "Convert xml to html: ant xmlToHtml [-Dsubdirs='${subdirs}' -Dxslt.outDir=${build.dir}/checkstyle_rpt -Dxslt.outFile=rpt.html -Dxslt.xsl=${ant.home}/etc/checkstyle/checkstyle-frames.xsl -Dxslt.in=${build.dir}/checkstyle_errors.xml]">
    <iterate target = 'xmlToHtml'/> </target>
  <target name = 'checkstyle' description = "Lint check (checkstyle) [-Dsubdirs='${subdirs}']">
    <iterate target = 'checkstyle'/> </target>
  <target name = 'scalastyle' description = "Lint check (scalastyle) [-Dsubdirs='${subdirs}']">
    <iterate target = 'scalastyle'/> </target>
  <target name = 'lint' description = "Lint check (checkstyle &amp; scalastyle) [-Dsubdirs='${subdirs}']">
    <iterate target = 'lint'/> </target>

  <target name = 'cover' description = "Generate coverage (jacoco): ant [-Dsubdirs='${subdirs}' -Dtest.opts='${test.opts}'] cover">
    <iterate target = 'cover'/> </target>
  <target name = 'report' description = "Report coverage (jacoco) [-Dsubdirs='${subdirs}']">
    <iterate target = 'report'/> </target>
  <target name = 'clean_cov' description = "Clean coverage data (jacoco) [-Dsubdirs='${subdirs}']">
    <iterate target = 'clean_cov'/> </target>
</project>
