<?xml version = '1.0' encoding = 'UTF-8'?>
<project default = 'report'
    xmlns:ivy = 'antlib:org.apache.ivy.ant'
    xmlns:jacoco = 'antlib:org.jacoco.ant' >

  <description>Jacoco coverage targets Ant buildfile script.</description>

  <property environment = 'env'/>
  <condition property = 'java.lib' value = '/usr/share/java'
      else = '/usr/local/share/java/classes'>
    <equals casesensitive = 'false' arg1 = 'Linux' arg2 = "${os.name}"/>
  </condition>
  <condition property = 'scala.lib' value = '/usr/share/scala/lib'
      else = '/usr/local/share/scala/lib'>
    <equals casesensitive = 'false' arg1 = 'Linux' arg2 = "${os.name}"/>
  </condition>

  <property name = 'build.dir' value = "${user.dir}/target"/>
  <property name = 'classes.dir' value = "${build.dir}/classes"/>
  <property name = 'dist.jar' value = "${build.dir}/util.jar"/>
  <property name = 'dist_test.jar' value = "${build.dir}/util-tests.jar"/>
  <property name = 'java.args' value = " -Djava.library.path=${java.library.path} -esa -ea -Xmx1024m -Xms16m -Xss16m"/>
  <property name = 'scala.args' value = " -Djava.library.path=${java.library.path} -J-esa -J-ea -J-Xmx1024m -J-Xms16m -J-Xss16m"/>
  <property name = 'test.opts' value = ''/>

  <target name = 'init_jacoco'>
    <!--<taskdef uri = 'antlib:org.jacoco.ant' resource = 'org/jacoco/ant/antlib.xml'>
    <classpath path = "${ant.library.dir}/jacocoant.jar"/> </taskdef>-->
    <ivy:cachepath resolveMode = 'dynamic' inline = 'true' type = 'jar'
      organisation = 'org.jacoco' module = 'org.jacoco.ant'
      revision = '[0.8.7,)' pathid = 'jacoco_ant.pathid'/>
    <taskdef uri = 'antlib:org.jacoco.ant' resource = 'org/jacoco/ant/antlib.xml'>
      <classpath path = "${toString:jacoco_ant.pathid}"/>
    </taskdef>
  </target>
  <target description = "Generate coverage (jacoco): ant [-Dtest.opts='${test.opts}'] cover" name = 'cover' depends = 'init_jacoco'>
    <!-- Wrap test execution with the JaCoCo coverage task -->
    <!--<java jar = "${dist_test.jar}" fork = 'true'>
      <jvmarg line = "-javaagent:${java.lib}/jacocoagent.jar=destfile=${build.dir}/jacoco.exec ${java.args}"/>
      <arg line = "${test.opts}"/>
      <classpath> <pathelement location = "${dist_test.jar}"/>
          </classpath>
      <sysproperty key = 'LD_LIBRARY_PATH' path = "${env.LD_LIBRARY_PATH}"/>
    </java>-->
    <jacoco:coverage destfile = "${build.dir}/jacoco.exec">
      <java jar = "${dist_test.jar}" fork = 'true'>
        <jvmarg line = "${java.args}"/>
        <arg line = "${test.opts}"/>
        <classpath> <pathelement location = "${dist_test.jar}"/>
            </classpath>
        <sysproperty key = 'LD_LIBRARY_PATH' path = "${env.LD_LIBRARY_PATH}"/>
      </java>
    </jacoco:coverage>
  </target>
  <target description = 'Report coverage (jacoco): ant report' name = 'report'
      depends = 'init_jacoco'>
    <jacoco:report>
      <executiondata> <file file = "${build.dir}/jacoco.exec"/> </executiondata>
      <structure name = 'JaCoCo report'>
        <classfiles>
          <!--<fileset dir = "${classes.dir}"/>-->
          <zipfileset src = "${dist.jar}"/>
        </classfiles>
        <sourcefiles encoding = 'UTF-8'>
          <!--<fileset dir = "${user.dir}/src/main"/>-->
          <zipfileset src = "${dist.jar}" includes = 'src/main/**/*'/>
        </sourcefiles>
      </structure>
      <html destdir = "${build.dir}/cov"/>
      <!--<csv destfile = "${build.dir}/cov/report.csv"/>-->
      <!--<xml destfile = "${build.dir}/cov/report.xml"/>-->
    </jacoco:report>
  </target>

  <target description = 'Clean coverage data (jacoco)' name = 'clean_cov'>
    <delete dir = "${build.dir}/cov" failonerror = 'false'/>
    <delete file = "${build.dir}/jacoco.exec" failonerror = 'false'/>
  </target>
  <target name = 'rebuild_cov' depends = 'clean_cov,cover,report'/>
</project>
